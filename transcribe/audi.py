# create_russian_audio.py
import wave
import numpy as np
import math


def create_audio_file():
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É–¥–∏–æ
    sample_rate = 44100  # Hz
    duration = 4.0  # seconds

    # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Åamples
    num_samples = int(sample_rate * duration)
    t = np.linspace(0, duration, num_samples, endpoint=False)

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –º–µ–ª–æ–¥–∏—é —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–æ–Ω–∞–º–∏
    signal = np.zeros(num_samples)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–Ω–æ–≤ (–∏–º–∏—Ç–∞—Ü–∏—è —Ä–µ—á–∏)
    frequencies = [220, 330, 440, 350, 280]  # Hz
    amplitudes = [0.3, 0.5, 0.7, 0.4, 0.2]

    for freq, amp in zip(frequencies, amplitudes):
        signal += amp * np.sin(2 * np.pi * freq * t)

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–≥–Ω–∞–ª
    signal = signal / np.max(np.abs(signal)) * 0.8

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ WAV —Ñ–∞–π–ª
    with wave.open("test_audio_ru.wav", "w") as wav_file:
        wav_file.setnchannels(1)  # mono
        wav_file.setsampwidth(2)  # 16 bits
        wav_file.setframerate(sample_rate)
        wav_file.writeframes((signal * 32767).astype(np.int16).tobytes())

    print("‚úÖ –°–æ–∑–¥–∞–Ω test_audio_ru.wav")
    print("üìÅ –§–∞–π–ª –≥–æ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API")


if __name__ == "__main__":
    create_audio_file()