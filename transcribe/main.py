import asyncio
import aio_pika
import json
import whisper
import tempfile
import os


async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    rabbitmq_url = os.getenv("RABBITMQ_URL", "amqp://guest:guest@rabbitmq:5672/")
    queue_name = os.getenv("TRANSCRIBE_QUEUE", "transcribe_queue")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    print("–ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å Whisper...")
    model = whisper.load_model("base")
    print("–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RabbitMQ
    print(f"–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RabbitMQ: {rabbitmq_url}")
    connection = await aio_pika.connect_robust(rabbitmq_url)
    channel = await connection.channel()

    # –û–±—ä—è–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å (Nest –ø—É–±–ª–∏–∫—É–µ—Ç –ø—Ä—è–º–æ –≤ –æ—á–µ—Ä–µ–¥—å, –ø–∞—Ç—Ç–µ—Ä–Ω –≤ payload)
    queue = await channel.declare_queue(queue_name, durable=True)

    print("üöÄ Transcribe service started!")
    print(f"üì° Listening on queue '{queue_name}' for patterns: health_check, transcribe_file")

    async with queue.iterator() as queue_iter:
        async for message in queue_iter:
            async with message.process():
                pattern = message.routing_key
                payload = json.loads(message.body.decode())

                # –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Nest –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç —Ñ–æ—Ä–º—É { pattern, data }.
                # –ë—ã–≤–∞—é—Ç —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ pattern —Ä–∞–≤–µ–Ω –∏–º–µ–Ω–∏ –æ—á–µ—Ä–µ–¥–∏. –¢–æ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ data.pattern,
                # –∏ —Ç–æ–ª—å–∫–æ –≤ —Å–∞–º–æ–º –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º routing_key.
                pattern_from_payload = payload.get("pattern")
                data = payload.get("data", payload)

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º health check
                if pattern_from_payload == "health_check":
                    response = {"status": "healthy", "service": "transcribe", "data": data}
                    print("‚úÖ Health check processed")

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é
                elif pattern_from_payload == "transcribe_file":
                    try:
                        audio_data = data.get('audiFile', {})
                        audi_bytes = bytes(audio_data['data'])
                        with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as tmp:
                            tmp.write(audi_bytes)
                            tmp_path = tmp.name
                            print(f"‚úÖ Temporary file created: {tmp_path}")
                        result = model.transcribe(tmp_path)
                        response = {"status": "success", "text": result.get("text", "")}
                        print("‚úÖ Transcription completed")
                        os.unlink(tmp_path)

                    except Exception as e:
                        response = {"status": "error", "message": str(e)}
                        print(f"‚ùå Transcription error: {e}")
                else:
                    response = {"status": "error", "message": f"Unknown pattern: {pattern_from_payload}"}

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ (RPC)
                if message.reply_to:
                    await channel.default_exchange.publish(
                        aio_pika.Message(
                            body=json.dumps(response).encode(),
                            correlation_id=message.correlation_id,
                        ),
                        routing_key=message.reply_to,
                    )


if __name__ == "__main__":
    asyncio.run(main())
